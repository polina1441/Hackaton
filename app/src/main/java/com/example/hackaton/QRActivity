package com.example.hackaton

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.os.Bundle
import android.os.Vibrator
import android.util.SparseArray
import android.view.*
import android.webkit.WebView
import android.widget.Button
import android.widget.TextView
import androidx.core.app.ActivityCompat
import androidx.fragment.app.Fragment
import androidx.navigation.findNavController
import com.google.android.gms.vision.CameraSource
import com.google.android.gms.vision.Detector
import com.google.android.gms.vision.barcode.Barcode
import com.google.android.gms.vision.barcode.BarcodeDetector
import java.io.IOException
import java.lang.Thread.sleep

class QRActivity : Fragment() {

    lateinit var txtView: TextView
    lateinit var button: Button
    lateinit var surfaceView:SurfaceView
    lateinit var cameraSource:CameraSource
    lateinit var textView:WebView

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {
        var root = inflater.inflate(R.layout.qr_activity, container, false)

        button = root.findViewById(R.id.button)
        surfaceView = root.findViewById(R.id.camerapreview)
        textView = root.findViewById(R.id.webView)

        val navController = requireActivity().findNavController(R.id.nav_host_fragment)


        var barcodeDetector1 = BarcodeDetector.Builder(requireContext())
            .setBarcodeFormats(Barcode.QR_CODE)
            .build()

        var cameraSource = CameraSource.Builder(requireContext(), barcodeDetector1)
            .setRequestedPreviewSize(640,480)
            .build()
        surfaceView.holder.addCallback(object: SurfaceHolder.Callback{
            override fun surfaceCreated(holder:SurfaceHolder) {
                if (ActivityCompat.checkSelfPermission(
                        requireActivity().applicationContext,
                        Manifest.permission.CAMERA
                    ) != PackageManager.PERMISSION_GRANTED
                ) {
                    return
                }
                try{
                    cameraSource.start(holder)
                } catch (e : IOException){
                    e.printStackTrace()
                }

            }

            override fun surfaceChanged(p0: SurfaceHolder, p1: Int, p2: Int, p3: Int) {
            }

            override fun surfaceDestroyed(holder:SurfaceHolder) {
                cameraSource.stop()
            }
        })
        barcodeDetector1.setProcessor(object : Detector.Processor<Barcode>{
            override fun release() {
            }
            override fun receiveDetections(detections: Detector.Detections<Barcode>) {
                var qrCodes: SparseArray<Barcode> = detections.detectedItems
                if(qrCodes.size()!=0){
                    textView.post(object: Runnable{
                        override fun run() {
                            var vibrator:Vibrator = requireActivity().applicationContext.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator
                            vibrator.vibrate(100)
                            val uri = qrCodes.valueAt(0).displayValue
                            surfaceView.visibility = View.GONE
                            textView.visibility = View.VISIBLE
                            textView.loadUrl(uri)

                            sleep(1000)

                        }


                    })

                }
            }
        })



         return  root
    }
    fun next(bundle: Bundle) {

    }






    /*var codes: String = arrayListOf<String>("qr","qr2","qr3").toString()
    var smthg = codes[0].toInt()
    var bitmap:Bitmap = BitmapFactory.decodeResource(getApplicationContext().resources, R.drawable.qr3)
    var barcodeDetector = BarcodeDetector.Builder(applicationContext)
        .setBarcodeFormats(Barcode.DATA_MATRIX or Barcode.QR_CODE)
        .build()
    if (!barcodeDetector.isOperational()){
        txtView.text = ("blah-blah-blah")
    }

    var frame:Frame = Frame.Builder().setBitmap(bitmap).build()
    var barcodes:SparseArray<Barcode> = barcodeDetector.detect(frame)
    var thisCode:Barcode = barcodes.valueAt(0)
    txtView.text = thisCode.rawValue*/
}
